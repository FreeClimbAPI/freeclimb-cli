/* WARNING: This file is automatically generated. Please edit the files in the /generation/commands directory. */
import { Command, flags } from "@oclif/command"
import chalk from "chalk"
import { Output } from "../../output"
import { FreeClimbApi, FreeClimbResponse } from "../../freeclimb"
import * as Errors from "../../errors"

export class conferenceParticipantsUpdate extends Command {
    static description = ` Update the properties of the specified conference participant.`

    static flags = {
        talk: flags.string({
            char: "T",
            description:
                "(Optional) Default is true. Setting to false mutes the Participant. FreeClimb returns an error and ignores any other value.",
            required: false,
            options: ["true", "false"],
        }),
        listen: flags.string({
            char: "l",
            description:
                "(Optional) Default is true. Setting to false silences the Conference for this Participant. FreeClimb returns an error and ignores any other value.",
            required: false,
            options: ["true", "false"],
        }),
        next: flags.boolean({ hidden: true }),
        help: flags.help({ char: "h" }),
    }

    static args = [
        {
            name: "conferenceId",
            description: "ID of the conference this participant is in.",
            required: true,
        },
        {
            name: "callId",
            description: "ID of the Call associated with this participant.",
            required: true,
        },
    ]

    async run() {
        const out = new Output(this)
        const { args, flags } = (() => {
            try {
                return this.parse(conferenceParticipantsUpdate)
            } catch (error) {
                const err = new Errors.ParseError(error)
                this.error(err.message, { exit: err.code })
            }
        })()
        const fcApi = new FreeClimbApi(
            `Conferences/${args.conferenceId}/Participants/${args.callId}`,
            true,
            this
        )
        const normalResponse = (response: FreeClimbResponse) => {
            if (response.status === 204) {
                out.out(
                    chalk.green(
                        "Received a success code from FreeClimb. There is no further output."
                    )
                )
            } else if (response.data) {
                out.out(JSON.stringify(response.data, null, 2))
            } else {
                throw new Errors.UndefinedResponseError()
            }
        }
        if (flags.next) {
            const error = new Errors.NoNextPage()
            this.error(error.message, { exit: error.code })
        }
        if (Object.entries(flags).length === 0) {
            this.warn(
                chalk.yellow(
                    "Nothing Has Been Updated: Please enter a parameter to update ('freeclimb conference-participants:update -h' for a list of parameters to be updated)"
                )
            )
        }

        // flags.talk === "true" sets talk to the boolean representation of the flag
        const talk = typeof flags.talk === "undefined" ? undefined : flags.talk === "true"
        // flags.listen === "true" sets listen to the boolean representation of the flag
        const listen = typeof flags.listen === "undefined" ? undefined : flags.listen === "true"

        await fcApi.apiCall(
            "POST",
            {
                data: {
                    talk: talk,
                    listen: listen,
                },
            },
            normalResponse
        )
    }
}
