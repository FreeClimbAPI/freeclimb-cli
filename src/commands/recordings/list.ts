/* WARNING: This file is automatically generated. Please edit the files in the /generation/commands directory. */
import { Command, flags } from "@oclif/command"
import chalk from "chalk"
import { Output } from '../../output'
import { FreeClimbApi, FreeClimbResponse } from '../../freeclimb'
import * as Errors from '../../errors'

export class recordingsList extends Command {
    static description = ` Retrieve a list of metadata for recordings associated with the specified account, sorted from latest created to oldest.`
    
    static flags = {
		callId: flags.string({            char: "c",            description: "Show only Recordings made during the Call with this ID.",             required: false,             }),
		conferenceId: flags.string({            char: "C",            description: "Show only Recordings made during the conference with this ID.",             required: false,             }),
		dateCreated: flags.string({            char: "d",            description: "Only show Recordings created on this date, formatted as YYYY-MM-DD.",             required: false,             }),
		next: flags.boolean({char: 'n', description: 'Displays the next page of output.'}),
		help: flags.help({char: 'h'}),
	}
    
    async run() {
        const out = new Output(this)
        const {flags} = (() => {
            try {
                return this.parse(recordingsList)
            } catch(error) {
                const err = new Errors.ParseError(error)
                this.error(err.message, { exit: err.code })
            }
        })()
        const fcApi = new FreeClimbApi(`Recordings`, true, this)
        const normalResponse = (response: FreeClimbResponse) => {
            if (response.status === 204) { out.out(chalk.green("Received a success code from FreeClimb. There is no further output.")) } else if (response.data) { out.out(JSON.stringify(response.data, null, 2)) } else { throw new Errors.UndefinedResponseError() }
        }
        const nextResponse = (response: FreeClimbResponse) => {if (response.data) { out.out(JSON.stringify(response.data, null, 2)) } else { throw new Errors.UndefinedResponseError() }
            if(out.next === null) {
                out.out("== You are on the last page of output. ==")
            }
        }
        
        if(flags.next) {
            if(out.next === undefined || out.next === "freeclimbUnnamedTest") {
                const error = new Errors.NoNextPage();
                this.error(error.message, { exit: error.code});
            
            }
            else {
                await fcApi.apiCall("GET", { params: {cursor: out.next} }, nextResponse)
            }
            return
        }
        
        
        await fcApi.apiCall("GET", {params: {
				callId: flags.callId,
				conferenceId: flags.conferenceId,
				dateCreated: flags.dateCreated,
			},
		}, normalResponse)
    }
}
