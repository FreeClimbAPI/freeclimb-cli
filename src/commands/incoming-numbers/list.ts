/* WARNING: This file is automatically generated. Please edit the files in the /generation/commands directory. */
import { Command, flags } from "@oclif/command"
import chalk from "chalk"
import { Output } from "../../output"
import { FreeClimbApi, FreeClimbResponse } from "../../freeclimb"
import * as Errors from "../../errors"

export class incomingNumbersList extends Command {
    static description = ` Retrieve a list of Incoming Phone Numbers associated with the specified account, sorted from newest to oldest.`

    static flags = {
        phoneNumber: flags.string({
            char: "p",
            description:
                "Only show incoming phone number resources that match this PCRE-compatible regular expression.",
            required: false,
        }),
        alias: flags.string({
            char: "a",
            description:
                "Only show incoming phone numbers with aliases that exactly match this value.",
            required: false,
        }),
        applicationID: flags.string({
            char: "A",
            description: "Filters numbers attached to specific applicaiton ID.",
            required: false,
        }),
        hasApplication: flags.string({
            char: "h",
            description:
                "Filters numbers based on whether or not they have an associated application.",
            required: false,
            options: ["true", "false"],
        }),
        country: flags.string({
            char: "C",
            description: "Filters numbers based on ISO country code.",
            required: false,
        }),
        region: flags.string({
            char: "r",
            description:
                "Filters numbers based on two letter state abrieviation. This flag is only available for US numbers.",
            required: false,
        }),
        smsEnabled: flags.string({
            char: "E",
            description: "Filters numbers based on SMS capabilities.",
            required: false,
            options: ["true", "false"],
        }),
        voiceEnables: flags.string({
            char: "o",
            description: "Filters numbers based on voice capabilities.",
            required: false,
            options: ["true", "false"],
        }),
        next: flags.boolean({ char: "n", description: "Displays the next page of output." }),
        help: flags.help({ char: "h" }),
    }

    async run() {
        const out = new Output(this)
        const { flags } = (() => {
            try {
                return this.parse(incomingNumbersList)
            } catch (error) {
                const err = new Errors.ParseError(error)
                this.error(err.message, { exit: err.code })
            }
        })()
        const fcApi = new FreeClimbApi(`IncomingPhoneNumbers`, true, this)
        const normalResponse = (response: FreeClimbResponse) => {
            if (response.status === 204) {
                out.out(
                    chalk.green(
                        "Received a success code from FreeClimb. There is no further output."
                    )
                )
            } else if (response.data) {
                out.out(JSON.stringify(response.data, null, 2))
            } else {
                throw new Errors.UndefinedResponseError()
            }
        }
        const nextResponse = (response: FreeClimbResponse) => {
            if (response.data) {
                out.out(JSON.stringify(response.data, null, 2))
            } else {
                throw new Errors.UndefinedResponseError()
            }
            if (out.next === null) {
                out.out("== You are on the last page of output. ==")
            }
        }

        if (flags.next) {
            if (out.next === undefined || out.next === "freeclimbUnnamedTest") {
                const error = new Errors.NoNextPage()
                this.error(error.message, { exit: error.code })
            } else {
                await fcApi.apiCall("GET", { params: { cursor: out.next } }, nextResponse)
            }
            return
        }

        // flags.hasApplication === "true" sets hasApplication to the boolean representation of the flag
        const hasApplication =
            typeof flags.hasApplication === "undefined"
                ? undefined
                : flags.hasApplication === "true"
        // flags.smsEnabled === "true" sets smsEnabled to the boolean representation of the flag
        const smsEnabled =
            typeof flags.smsEnabled === "undefined" ? undefined : flags.smsEnabled === "true"
        // flags.voiceEnables === "true" sets voiceEnables to the boolean representation of the flag
        const voiceEnables =
            typeof flags.voiceEnables === "undefined" ? undefined : flags.voiceEnables === "true"

        await fcApi.apiCall(
            "GET",
            {
                params: {
                    phoneNumber: flags.phoneNumber,
                    alias: flags.alias,
                    applicationID: flags.applicationID,
                    hasApplication: hasApplication,
                    country: flags.country,
                    region: flags.region,
                    smsEnabled: smsEnabled,
                    voiceEnables: voiceEnables,
                },
            },
            normalResponse
        )
    }
}
