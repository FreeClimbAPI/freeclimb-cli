/* WARNING: This file is automatically generated. Please edit the files in the /generation/commands directory. */
import { Command, flags } from "@oclif/command"
import { Output } from "../../output"
import { FreeClimbApi, FreeClimbResponse } from "../../freeclimb"
import * as Errors from "../../errors"

export class incomingNumbersBuy extends Command {
    static description = ` Purchase a new phone number for the specified account. If the specified phone number is available, FreeClimb will add it to the account. To find an available phone number, use the /AvailablePhoneNumbers endpoint.`

    static flags = {
        alias: flags.string({
            char: "a",
            description: "Description for this new incoming phone number (max 64 characters).",
            required: false,
        }),
        applicationId: flags.string({
            char: "A",
            description: "ID of the application that should handle phone calls to the number.",
            required: false,
        }),
        next: flags.boolean({ hidden: true }),
        help: flags.help({ char: "h" }),
    }

    static args = [
        {
            name: "phoneNumber",
            description:
                "Phone number to purchase in E.164 format (as returned in the list of Available Phone Numbers).",
            required: true,
        },
    ]

    async run() {
        const out = new Output(this)
        const { args, flags } = (() => {
            try {
                return this.parse(incomingNumbersBuy)
            } catch (error) {
                const err = new Errors.ParseError(error)
                this.error(err.message, { exit: err.code })
            }
        })()
        const fcApi = new FreeClimbApi(`IncomingPhoneNumbers`, true, this)
        const normalResponse = (response: FreeClimbResponse) => {
            if (response.status === 204) {
                out.out("Received a success code from FreeClimb. There is no further output.")
            } else if (response.data) {
                out.out(JSON.stringify(response.data, null, 2))
            } else {
                throw new Errors.UndefinedResponseError()
            }
        }
        if (flags.next) {
            const error = new Errors.NoNextPage()
            this.error(error.message, { exit: error.code })
        }

        await fcApi.apiCall(
            "POST",
            {
                data: {
                    phoneNumber: args.phoneNumber,
                    alias: flags.alias,
                    applicationId: flags.applicationId,
                },
            },
            normalResponse
        )
    }
}
