/* WARNING: This file is automatically generated. Please edit the files in the /generation/commands directory. */
import { Command, flags } from "@oclif/command"
import chalk from "chalk"
import { Output } from '../../output'
import { FreeClimbApi, FreeClimbResponse } from '../../freeclimb'
import * as Errors from '../../errors'

export class incomingNumbersUpdate extends Command {
    static description = ` Update the properties of the specified incoming phone number.`
    
    static flags = {
		applicationId: flags.string({            char: "A",            description: "ID of the Application that should handle calls to this number.",             required: false,             }),
		alias: flags.string({            char: "a",            description: "Description for this phone number.",             required: false,             }),
		next: flags.boolean({hidden: true}),
		help: flags.help({char: 'h'}),
	}
    
	static args = [		{name: "phoneNumberId", description: "String that uniquely identifies this phone number resource.", required: true},
]

    async run() {
        const out = new Output(this)
        const {args, flags} = (() => {
            try {
                return this.parse(incomingNumbersUpdate)
            } catch(error) {
                const err = new Errors.ParseError(error)
                this.error(err.message, { exit: err.code })
            }
        })()
        const fcApi = new FreeClimbApi(`IncomingPhoneNumbers/${args.phoneNumberId}`, true, this)
        const normalResponse = (response: FreeClimbResponse) => {
            if (response.status === 204) { out.out(chalk.green("Received a success code from FreeClimb. There is no further output.")) } else if (response.data) { out.out(JSON.stringify(response.data, null, 2)) } else { throw new Errors.UndefinedResponseError() }
        }
        if(flags.next) {
            
                const error = new Errors.NoNextPage();
                this.error(error.message, { exit: error.code});
            
        }
        if(Object.entries(flags).length === 0) { this.warn(chalk.yellow("Nothing Has Been Updated: Please enter a parameter to update ('freeclimb incoming-numbers:update -h' for a list of parameters to be updated)"))}

        
        await fcApi.apiCall("POST", {data: {
				applicationId: flags.applicationId,
				alias: flags.alias,
			},
		}, normalResponse)
    }
}
