/* WARNING: This file is automatically generated. Please edit the files in the /generation/commands directory. */
import { Command, flags } from "@oclif/command"
import chalk from "chalk"
import { Output } from "../../output"
import { FreeClimbApi, FreeClimbResponse } from "../../freeclimb"
import * as Errors from "../../errors"

export class conferencesCreate extends Command {
    static description = ` Create an empty Conference within the specified account. The status of a conference will be reported to the statusCallbackUrl when: Participants can be added to a Conference once the statusCallbackUrl is invoked, signifying the Conference has been created and is empty. When a populated or inProgress Conference is terminated, this URL is called twice — once when the Conference becomes empty and then again when it is terminated. Note This is a notification only. Any PerCL returned by the application is ignored. The statusCallbackUrl is invoked using HTTP POST with the following parameters (in addition to the standard request parameters).`

    static flags = {
        alias: flags.string({
            char: "a",
            description: "A description for this Conference. Maximum 64 characters.",
            required: false,
        }),
        playBeep: flags.string({
            char: "b",
            description:
                "Controls when a beep is played. Valid values: always, never, entryOnly, exitOnly.",
            required: false,
        }),
        record: flags.string({
            char: "r",
            description: "Setting to true records the entire Conference.",
            required: false,
            options: ["true", "false"],
        }),
        waitUrl: flags.string({
            char: "w",
            description:
                "If specified, a URL for the audio file that provides custom hold music for the Conference when it is in the populated state. Otherwise, FreeClimb uses a system default audio file. This is always fetched using HTTP GET and is fetched just once — when the Conference is created.",
            required: false,
        }),
        statusCallbackUrl: flags.string({
            char: "s",
            description:
                "This URL is invoked when the status of the Conference changes. For more information, see statusCallbackUrl (below).",
            required: false,
        }),
        next: flags.boolean({ hidden: true }),
        help: flags.help({ char: "h" }),
    }

    async run() {
        const out = new Output(this)
        const { flags } = (() => {
            try {
                return this.parse(conferencesCreate)
            } catch (error) {
                const err = new Errors.ParseError(error)
                this.error(err.message, { exit: err.code })
            }
        })()
        const fcApi = new FreeClimbApi(`Conferences`, true, this)
        const normalResponse = (response: FreeClimbResponse) => {
            if (response.status === 204) {
                out.out(
                    chalk.green(
                        "Received a success code from FreeClimb. There is no further output."
                    )
                )
            } else if (response.data) {
                out.out(JSON.stringify(response.data, null, 2))
            } else {
                throw new Errors.UndefinedResponseError()
            }
        }
        if (flags.next) {
            const error = new Errors.NoNextPage()
            this.error(error.message, { exit: error.code })
        }

        // flags.record === "true" sets record to the boolean representation of the flag
        const record = typeof flags.record === "undefined" ? undefined : flags.record === "true"

        await fcApi.apiCall(
            "POST",
            {
                data: {
                    alias: flags.alias,
                    playBeep: flags.playBeep,
                    record: record,
                    waitUrl: flags.waitUrl,
                    statusCallbackUrl: flags.statusCallbackUrl,
                },
            },
            normalResponse
        )
    }
}
