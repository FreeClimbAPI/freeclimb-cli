/* WARNING: This file is automatically generated. Please edit the files in the /generation/commands directory. */
import { Command, flags } from "@oclif/command"
import chalk from "chalk"
import { Output } from '../../output'
import { FreeClimbApi, FreeClimbResponse } from '../../freeclimb'
import * as Errors from '../../errors'

export class queueMembersDequeueHead extends Command {
    static description = ` Dequeue the Member at the head of the Queue. The Member's Call will begin executing the PerCL script returned from the callback specified in the actionUrl parameter when the Member was added.  Note: See the Enqueue PerCL command for details on actionUrl.`
    
    static flags = {
		next: flags.boolean({hidden: true}),
		help: flags.help({char: 'h'}),
	}
    
	static args = [		{name: "queueId", description: "String that uniquely identifies this queue resource.", required: true},
]

    async run() {
        const out = new Output(this)
        const {args, flags} = (() => {
            try {
                return this.parse(queueMembersDequeueHead)
            } catch(error) {
                const err = new Errors.ParseError(error)
                this.error(err.message, { exit: err.code })
            }
        })()
        const fcApi = new FreeClimbApi(`Queues/${args.queueId}/Members/Front`, true, this)
        const normalResponse = (response: FreeClimbResponse) => {
            if (response.status === 204) { out.out(chalk.green("Received a success code from FreeClimb. There is no further output.")) } else if (response.data) { out.out(JSON.stringify(response.data, null, 2)) } else { throw new Errors.UndefinedResponseError() }
        }
        if(flags.next) {
            
                const error = new Errors.NoNextPage();
                this.error(error.message, { exit: error.code});
            
        }
        
        
        await fcApi.apiCall("POST", {}, normalResponse)
    }
}
