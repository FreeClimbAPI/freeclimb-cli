/* WARNING: This file is automatically generated. Please edit the files in the /generation/commands directory. */
import { Command, flags } from "@oclif/command"
import chalk from "chalk"
import { Output } from "../../output"
import { FreeClimbApi, FreeClimbResponse } from "../../freeclimb"
import * as Errors from "../../errors"

export class accountsManage extends Command {
    static description = `This command allows you to manage an account.`

    static flags = {
        alias: flags.string({
            char: "a",
            description: "Description for this account.",
            required: false,
        }),
        label: flags.string({
            char: "l",
            description: "Group to which this account belongs.",
            required: false,
        }),
        next: flags.boolean({ hidden: true }),
        help: flags.help({ char: "h" }),
    }

    async run() {
        const out = new Output(this)
        const { flags } = (() => {
            try {
                return this.parse(accountsManage)
            } catch (error) {
                const err = new Errors.ParseError(error)
                this.error(err.message, { exit: err.code })
            }
        })()
        const fcApi = new FreeClimbApi(``, true, this)
        const normalResponse = (response: FreeClimbResponse) => {
            if (response.status === 204) {
                out.out(
                    chalk.green(
                        "Received a success code from FreeClimb. There is no further output."
                    )
                )
            } else if (response.data) {
                out.out(JSON.stringify(response.data, null, 2))
            } else {
                throw new Errors.UndefinedResponseError()
            }
        }
        if (flags.next) {
            const error = new Errors.NoNextPage()
            this.error(error.message, { exit: error.code })
        }
        if (Object.entries(flags).length === 0) {
            this.warn(
                chalk.yellow(
                    "Nothing Has Been Updated: Please enter a parameter to update ('freeclimb accounts:manage -h' for a list of parameters to be updated)"
                )
            )
        }

        await fcApi.apiCall(
            "POST",
            {
                data: {
                    alias: flags.alias,
                    label: flags.label,
                },
            },
            normalResponse
        )
    }
}
