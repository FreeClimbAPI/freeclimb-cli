/* WARNING: This file is automatically generated. Please edit the files in the /generation/tests directory. */
import { expect, test } from "@oclif/test"
import { cred } from "../../src/credentials"

describe("calls:make Data Test", function () {
    const testJson = {
        message: "Response from server",
    }

    const nockServerResponse = `{
  "message": "Response from server"
}`

    test.nock("https://www.freeclimb.com", async (api) =>
        api
            .post(`/apiserver/Accounts/${await cred.accountId}/Calls`, {
                from: "userInput-from",
                to: "userInput-to",
                applicationId: "userInput-applicationId",
            })
            .query({})
            .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
            .reply(200, testJson)
    )
        .stdout()
        .command(["calls:make", "userInput-from", "userInput-to", "userInput-applicationId"])
        .it("Test all required paramaters", async (ctx) => {
            expect(ctx.stdout).to.contain(nockServerResponse)
        })

    const testJsonErrorNoSuggestion = {
        code: 2,
        message: "Method Not Allowed",
        url: "https://docs.freeclimb.com/reference/error-and-warning-dictionary#2",
        details: {},
    }

    const nockServerResponseErrorNoSuggestion = `starting test`

    test.nock("https://www.freeclimb.com", async (api) =>
        api
            .post(`/apiserver/Accounts/${await cred.accountId}/Calls`, {
                from: "userInput-from",
                to: "userInput-to",
                applicationId: "userInput-applicationId",
            })
            .query({})
            .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
            .reply(500, testJsonErrorNoSuggestion)
    )
        .stdout()
        .command(["calls:make", "userInput-from", "userInput-to", "userInput-applicationId"])
        .exit(3)
        .it("Test Freeclimb Api error repsonce is process correctly without a suggestion")

    test.nock("https://user-custom-domain.example.com", async (api) =>
        api
            .post(`/apiserver/Accounts/${await cred.accountId}/Calls`, {
                from: "userInput-from",
                to: "userInput-to",
                applicationId: "userInput-applicationId",
            })
            .query({})
            .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
            .reply(200, testJson)
    )
        .stdout()
        .env({ FREECLIMB_CLI_BASE_URL: "https://user-custom-domain.example.com/apiserver" })
        .command(["calls:make", "userInput-from", "userInput-to", "userInput-applicationId"])
        .it("Sends API requests to the base URL from an environment variable", async (ctx) => {
            expect(ctx.stdout).to.contain(nockServerResponse)
        })

    const testJsonErrorWithSuggestion = {
        code: 50,
        message: "Unauthorized To Make Request",
        url: "https://docs.freeclimb.com/reference/error-and-warning-dictionary#50",
        details: {},
    }

    const nockServerResponseErrorWithSuggestion = `starting test`

    test.nock("https://www.freeclimb.com", async (api) =>
        api
            .post(`/apiserver/Accounts/${await cred.accountId}/Calls`, {
                from: "userInput-from",
                to: "userInput-to",
                applicationId: "userInput-applicationId",
            })
            .query({})
            .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
            .reply(500, testJsonErrorWithSuggestion)
    )
        .stdout()
        .command(["calls:make", "userInput-from", "userInput-to", "userInput-applicationId"])
        .exit(3)
        .it("Test Freeclimb Api error repsonce is process correctly with a suggestion")

    test.stdout()
        .command([
            "calls:make",
            "userInput-from",
            "userInput-to",
            "userInput-applicationId",
            "additionalArguments",
        ])
        .exit(2)
        .it("Test parse error gets triggered when there is an additional argument")

    test.nock("https://www.freeclimb.com", async (api) =>
        api
            .post(`/apiserver/Accounts/${await cred.accountId}/Calls`, {
                from: "userInput-from",
                to: "userInput-to",
                applicationId: "userInput-applicationId",
            })
            .query({})
            .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
            .reply(200, undefined)
    )
        .stdout()
        .command(["calls:make", "userInput-from", "userInput-to", "userInput-applicationId"])
        .exit(3)
        .it("Test error resulting in an unreadable response")

    test.nock("https://www.freeclimb.com", async (api) =>
        api
            .post(`/apiserver/Accounts/${await cred.accountId}/Calls`, {
                from: "userInput-from",
                to: "userInput-to",
                applicationId: "userInput-applicationId",
                sendDigits: "userInput-sendDigits",
                ifMachine: "userInput-ifMachine",
                ifMachineUrl: "userInput-ifMachineUrl",
                timeout: 10,
                parentCallId: "userInput-parentCallId",
            })
            .query({})
            .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
            .reply(200, testJson)
    )
        .stdout()
        .command([
            "calls:make",
            "userInput-from",
            "userInput-to",
            "userInput-applicationId",
            "--sendDigits",
            "userInput-sendDigits",
            "--ifMachine",
            "userInput-ifMachine",
            "--ifMachineUrl",
            "userInput-ifMachineUrl",
            "--timeout",
            "10",
            "--parentCallId",
            "userInput-parentCallId",
        ])
        .it(
            "testing all body parameters together and required query are sent through with request",
            async (ctx) => {
                expect(ctx.stdout).to.contain(nockServerResponse)
            }
        )

    describe("calls:make body param flags", function () {
        test.nock("https://www.freeclimb.com", async (api) =>
            api
                .post(`/apiserver/Accounts/${await cred.accountId}/Calls`, {
                    from: "userInput-from",
                    to: "userInput-to",
                    applicationId: "userInput-applicationId",
                    sendDigits: "userInput-sendDigits",
                })
                .query({})
                .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
                .reply(200, testJson)
        )
            .stdout()
            .command([
                "calls:make",
                "userInput-from",
                "userInput-to",
                "userInput-applicationId",
                "--sendDigits",
                "userInput-sendDigits",
            ])
            .it(
                "required params and a body param is sent through with request-sendDigits",
                async (ctx) => {
                    expect(ctx.stdout).to.contain(nockServerResponse)
                }
            )

        test.nock("https://www.freeclimb.com", async (api) =>
            api
                .post(`/apiserver/Accounts/${await cred.accountId}/Calls`, {
                    from: "userInput-from",
                    to: "userInput-to",
                    applicationId: "userInput-applicationId",
                    ifMachine: "userInput-ifMachine",
                })
                .query({})
                .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
                .reply(200, testJson)
        )
            .stdout()
            .command([
                "calls:make",
                "userInput-from",
                "userInput-to",
                "userInput-applicationId",
                "--ifMachine",
                "userInput-ifMachine",
            ])
            .it(
                "required params and a body param is sent through with request-ifMachine",
                async (ctx) => {
                    expect(ctx.stdout).to.contain(nockServerResponse)
                }
            )

        test.nock("https://www.freeclimb.com", async (api) =>
            api
                .post(`/apiserver/Accounts/${await cred.accountId}/Calls`, {
                    from: "userInput-from",
                    to: "userInput-to",
                    applicationId: "userInput-applicationId",
                    ifMachineUrl: "userInput-ifMachineUrl",
                })
                .query({})
                .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
                .reply(200, testJson)
        )
            .stdout()
            .command([
                "calls:make",
                "userInput-from",
                "userInput-to",
                "userInput-applicationId",
                "--ifMachineUrl",
                "userInput-ifMachineUrl",
            ])
            .it(
                "required params and a body param is sent through with request-ifMachineUrl",
                async (ctx) => {
                    expect(ctx.stdout).to.contain(nockServerResponse)
                }
            )

        test.nock("https://www.freeclimb.com", async (api) =>
            api
                .post(`/apiserver/Accounts/${await cred.accountId}/Calls`, {
                    from: "userInput-from",
                    to: "userInput-to",
                    applicationId: "userInput-applicationId",
                    timeout: 10,
                })
                .query({})
                .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
                .reply(200, testJson)
        )
            .stdout()
            .command([
                "calls:make",
                "userInput-from",
                "userInput-to",
                "userInput-applicationId",
                "--timeout",
                "10",
            ])
            .it(
                "required params and a body param is sent through with request-timeout",
                async (ctx) => {
                    expect(ctx.stdout).to.contain(nockServerResponse)
                }
            )

        test.stdout()
            .command([
                "calls:make",
                "userInput-from",
                "userInput-to",
                "userInput-applicationId",
                "--timeout",
                "121",
            ])
            .exit(2)
            .it("test that exit code 2 is used when timeout number goes above 120")

        test.stdout()
            .command([
                "calls:make",
                "userInput-from",
                "userInput-to",
                "userInput-applicationId",
                "--timeout",
                "-1",
            ])
            .exit(2)
            .it("test that exit code 2 is used when timeout number goes below 0")

        test.nock("https://www.freeclimb.com", async (api) =>
            api
                .post(`/apiserver/Accounts/${await cred.accountId}/Calls`, {
                    from: "userInput-from",
                    to: "userInput-to",
                    applicationId: "userInput-applicationId",
                    parentCallId: "userInput-parentCallId",
                })
                .query({})
                .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
                .reply(200, testJson)
        )
            .stdout()
            .command([
                "calls:make",
                "userInput-from",
                "userInput-to",
                "userInput-applicationId",
                "--parentCallId",
                "userInput-parentCallId",
            ])
            .it(
                "required params and a body param is sent through with request-parentCallId",
                async (ctx) => {
                    expect(ctx.stdout).to.contain(nockServerResponse)
                }
            )
    })

    describe("calls:make next flag test", function () {
        test.nock("https://www.freeclimb.com", async (api) =>
            api
                .post(`/apiserver/Accounts/${await cred.accountId}/Calls`, {
                    from: "userInput-from",
                    to: "userInput-to",
                    applicationId: "userInput-applicationId",
                })
                .query({})
                .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
                .reply(200, testJson)
        )
            .stdout()
            .env({ FREECLIMB_CALLS_MAKE_NEXT: undefined })
            .command(["calls:make", "userInput-from", "userInput-to", "userInput-applicationId"])
            .command([
                "calls:make",
                "userInput-from",
                "userInput-to",
                "userInput-applicationId",
                "--next",
            ])
            .exit(3)
            .it("Tests return of Exit Code 3 when flag next is not available")
    })
})

describe("calls:make Status Test", function () {
    const testJsonStatus = ""

    const statusResponse = `Received a success code from FreeClimb. There is no further output.
`

    test.nock("https://www.freeclimb.com", async (api) =>
        api
            .post(`/apiserver/Accounts/${await cred.accountId}/Calls`, {
                from: "userInput-from",
                to: "userInput-to",
                applicationId: "userInput-applicationId",
            })
            .query({})
            .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
            .reply(204, testJsonStatus)
    )
        .stdout()
        .command(["calls:make", "userInput-from", "userInput-to", "userInput-applicationId"])
        .it("Test all required paramaters", async (ctx) => {
            expect(ctx.stdout).to.contain(statusResponse)
        })
})
