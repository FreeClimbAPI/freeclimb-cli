/* WARNING: This file is automatically generated. Please edit the files in the /generation/tests directory. */
import { expect, test } from "@oclif/test"
import { cred } from "../../src/credentials"

const conferenceId = "userInput-conferenceId"
const callId = "userInput-callId"

describe("conference-participants:update Data Test", function () {
    const testJson = {
        message: "Response from server",
    }

    const nockServerResponse = `{
  "message": "Response from server"
}`

    test.nock("https://www.freeclimb.com", async (api) =>
        api
            .post(
                `/apiserver/Accounts/${await cred.accountId}/Conferences/${conferenceId}/Participants/${callId}`,
                {}
            )
            .query({})
            .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
            .reply(200, testJson)
    )
        .stdout()
        .command(["conference-participants:update", "userInput-conferenceId", "userInput-callId"])
        .it("Test all required paramaters", async (ctx) => {
            expect(ctx.stdout).to.contain(nockServerResponse)
        })

    const testJsonErrorNoSuggestion = {
        code: 2,
        message: "Method Not Allowed",
        url: "https://docs.freeclimb.com/reference/error-and-warning-dictionary#2",
        details: {},
    }

    const nockServerResponseErrorNoSuggestion = `starting test`

    test.nock("https://www.freeclimb.com", async (api) =>
        api
            .post(
                `/apiserver/Accounts/${await cred.accountId}/Conferences/${conferenceId}/Participants/${callId}`,
                {}
            )
            .query({})
            .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
            .reply(500, testJsonErrorNoSuggestion)
    )
        .stdout()
        .command(["conference-participants:update", "userInput-conferenceId", "userInput-callId"])
        .exit(3)
        .it("Test Freeclimb Api error repsonce is process correctly without a suggestion")

    const testJsonErrorWithSuggestion = {
        code: 50,
        message: "Unauthorized To Make Request",
        url: "https://docs.freeclimb.com/reference/error-and-warning-dictionary#50",
        details: {},
    }

    const nockServerResponseErrorWithSuggestion = `starting test`

    test.nock("https://www.freeclimb.com", async (api) =>
        api
            .post(
                `/apiserver/Accounts/${await cred.accountId}/Conferences/${conferenceId}/Participants/${callId}`,
                {}
            )
            .query({})
            .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
            .reply(500, testJsonErrorWithSuggestion)
    )
        .stdout()
        .command(["conference-participants:update", "userInput-conferenceId", "userInput-callId"])
        .exit(3)
        .it("Test Freeclimb Api error repsonce is process correctly with a suggestion")

    test.stdout()
        .command([
            "conference-participants:update",
            "userInput-conferenceId",
            "userInput-callId",
            "additionalArguments",
        ])
        .exit(2)
        .it("Test parse error gets triggered when there is an additional argument")

    test.nock("https://www.freeclimb.com", async (api) =>
        api
            .post(
                `/apiserver/Accounts/${await cred.accountId}/Conferences/${conferenceId}/Participants/${callId}`,
                {}
            )
            .query({})
            .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
            .reply(200, undefined)
    )
        .stdout()
        .command(["conference-participants:update", "userInput-conferenceId", "userInput-callId"])
        .exit(3)
        .it("Test error resulting in an unreadable response")

    test.nock("https://www.freeclimb.com", async (api) =>
        api
            .post(
                `/apiserver/Accounts/${await cred.accountId}/Conferences/${conferenceId}/Participants/${callId}`,
                {
                    talk: true,
                    listen: true,
                }
            )
            .query({})
            .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
            .reply(200, testJson)
    )
        .stdout()
        .command([
            "conference-participants:update",
            "userInput-conferenceId",
            "userInput-callId",
            "--talk",
            "true",
            "--listen",
            "true",
        ])
        .it(
            "testing all body parameters together and required query are sent through with request",
            async (ctx) => {
                expect(ctx.stdout).to.contain(nockServerResponse)
            }
        )

    describe("conference-participants:update body param flags", function () {
        test.nock("https://www.freeclimb.com", async (api) =>
            api
                .post(
                    `/apiserver/Accounts/${await cred.accountId}/Conferences/${conferenceId}/Participants/${callId}`,
                    {
                        talk: true,
                    }
                )
                .query({})
                .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
                .reply(200, testJson)
        )
            .stdout()
            .command([
                "conference-participants:update",
                "userInput-conferenceId",
                "userInput-callId",
                "--talk",
                "true",
            ])
            .it(
                "required params and a body param is sent through with request-talk",
                async (ctx) => {
                    expect(ctx.stdout).to.contain(nockServerResponse)
                }
            )

        test.nock("https://www.freeclimb.com", async (api) =>
            api
                .post(
                    `/apiserver/Accounts/${await cred.accountId}/Conferences/${conferenceId}/Participants/${callId}`,
                    {
                        listen: true,
                    }
                )
                .query({})
                .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
                .reply(200, testJson)
        )
            .stdout()
            .command([
                "conference-participants:update",
                "userInput-conferenceId",
                "userInput-callId",
                "--listen",
                "true",
            ])
            .it(
                "required params and a body param is sent through with request-listen",
                async (ctx) => {
                    expect(ctx.stdout).to.contain(nockServerResponse)
                }
            )
    })

    describe("conference-participants:update next flag test", function () {
        test.nock("https://www.freeclimb.com", async (api) =>
            api
                .post(
                    `/apiserver/Accounts/${await cred.accountId}/Conferences/${conferenceId}/Participants/${callId}`,
                    {}
                )
                .query({})
                .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
                .reply(200, testJson)
        )
            .stdout()
            .env({ FREECLIMB_CONFERENCE_PARTICIPANTS_UPDATE_NEXT: undefined })
            .command([
                "conference-participants:update",
                "userInput-conferenceId",
                "userInput-callId",
            ])
            .command([
                "conference-participants:update",
                "userInput-conferenceId",
                "userInput-callId",
                "--next",
            ])
            .exit(3)
            .it("Tests return of Exit Code 3 when flag next is not available")
    })

    describe("conference-participants:update boolean input test", function () {
        test.nock("https://www.freeclimb.com", async (api) =>
            api
                .post(
                    `/apiserver/Accounts/${await cred.accountId}/Conferences/${conferenceId}/Participants/${callId}`,
                    {
                        talk: false,
                        listen: false,
                    }
                )
                .query({})
                .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
                .reply(200, testJson)
        )
            .stdout()
            .command([
                "conference-participants:update",
                "userInput-conferenceId",
                "userInput-callId",
                "--talk",
                "false",
                "--listen",
                "false",
            ])
            .it("tests that value false can be used with boolean flags and args", async (ctx) => {
                expect(ctx.stdout).to.contain(nockServerResponse)
            })

        test.stdout()
            .command([
                "conference-participants:update",
                "userInput-conferenceId",
                "userInput-callId",
                "--talk",
                "flse",
            ])
            .exit(2)
            .it("tests incorrect talk input results in exit code 2")

        test.stdout()
            .command([
                "conference-participants:update",
                "userInput-conferenceId",
                "userInput-callId",
                "--listen",
                "flse",
            ])
            .exit(2)
            .it("tests incorrect listen input results in exit code 2")
    })
})

describe("conference-participants:update Status Test", function () {
    const testJsonStatus = ""

    const statusResponse = `Received a success code from FreeClimb. There is no further output.
`

    test.nock("https://www.freeclimb.com", async (api) =>
        api
            .post(
                `/apiserver/Accounts/${await cred.accountId}/Conferences/${conferenceId}/Participants/${callId}`,
                {}
            )
            .query({})
            .basicAuth({ user: await cred.accountId, pass: await cred.authToken })
            .reply(204, testJsonStatus)
    )
        .stdout()
        .command(["conference-participants:update", "userInput-conferenceId", "userInput-callId"])
        .it("Test all required paramaters", async (ctx) => {
            expect(ctx.stdout).to.contain(statusResponse)
        })
})
